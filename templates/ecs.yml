AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate.
Parameters:
  
  ImageUri:
    Type: String
    Default: {{ ecs.Image }}
  ServiceName:
    Type: String
    Default: {{ ecs.ServiceName}}
  ContainerPort:
    Type: Number
    Default: {{ ecs.ContainerPort }}

  LoadBalancerPort:
    Type: Number
    Default: {{ ecs.LoadBalancerPort }}
  HealthCheckPath:
    Type: String
    Default: {{ ecs.HealthCheckPath }}
  
  MinContainers:
    Type: Number
    Default: {{ ecs.MinContainers }}
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: {{ ecs.MaxContainers }}

  AutoScalingTargetValue:
    Type: Number
    Default: 50
 
 
 
Resources:  
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]
  
  ## Task Definition
  TaskDefinition1:
    Type: AWS::ECS::TaskDefinition
    
    DependsOn: LogGroup
    Properties:
      # Name of the task definition.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition1]]
     
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE    
      Cpu: 1024  
      Memory: 2GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ImageUri
          Environment:
            - Name: DB_ENDPOINT
              Value: 
                Fn::ImportValue: DBEndPoint

            # - Name: MYSQL_PORT
            #   Value: 3306

            - Name: DB_NAME
              Value: 
                Fn::ImportValue: dbname

            - Name: DB_USER
              Value: 
                Fn::ImportValue: dbusername

            - Name: DB_PASS
              Value: 
                Fn::ImportValue: dbpassword

            # - Name: MYSQL_ROOT_PASSWORD
            #   Value: root@123
              
          PortMappings:
            - ContainerPort: !Ref ContainerPort

          # CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs


  ## Role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        
  ## Role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
     
  ## A Role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  

  ## Container Security Group
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: 
        Fn::ImportValue: VPC                                                                   #############################3
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 0 ##########!Ref ContainerPort
          ToPort: 65535 #############!Ref ContainerPort
          CidrIp: 0.0.0.0/0
          #SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

          

  ## LoadBalancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, LoadBalancerSecurityGroup]]
      VpcId: 
        Fn::ImportValue: VPC                                                                   ###################################
    
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  
  ## Service
  Service:
    Type: AWS::ECS::Service
    
    DependsOn:
      - ListenerHTTP

    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30         #
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: PrivateSubnet1  #private                      ################################################
            - Fn::ImportValue: PrivateSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup


  

            
  
  ## Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 40
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-499
      Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: 8090
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 
      TargetType: ip
      VpcId: 
        Fn::ImportValue: VPC                             ########################################################
  
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTP

    
      # Certificates:
      #   - CertificateArn: !Ref Certificate
  
  ## Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: PublicSubnet1                                   #public  ###################################################################
        - Fn::ImportValue: PublicSubnet2
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]
  
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # AWS Identity and Access Management (IAM)
      RoleARN: !GetAtt AutoScalingRole.Arn
 
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue


  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: 
  #     SecurityGroups: !Ref InstanceSecurityGroup
  #     KeyName: 
  #     ImageId: 
  # InstanceSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Enable SSH access via port 22
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: 22
  #       ToPort: 22
  #       CidrIp: 0.0.0.0/0
  #     - IpProtocol: tcp
  #       FromPort: 0
  #       ToPort: 65535
  #       CidrIp: 0.0.0.0/0




################################################################################################
################################################################################################
################################################################################################


#  ## LoadBalancer Security Group
#   LoadBalancerSecurityGroup2:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: mysql
#       VpcId: 
#         Fn::ImportValue: VPC                                                                   ###################################
    
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 0
#           ToPort: 65535
#           CidrIp: 0.0.0.0/0

#   ## Container Security Group
#   ContainerSecurityGroup2:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: mysql
#       VpcId: 
#         Fn::ImportValue: VPC                                                                   #############################3
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 3306 #!Ref ContainerPort
#           ToPort: 3306 #!Ref ContainerPort
#           SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup2
#         - IpProtocol: tcp
#           FromPort: 0 ##########!Ref ContainerPort
#           ToPort: 65535 #############!Ref ContainerPort
#           CidrIp: 0.0.0.0/0
#           #SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup



#   ## Target Group
#   TargetGroup2:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       HealthCheckIntervalSeconds: 40
#       HealthCheckPath: !Ref HealthCheckPath
#       HealthCheckTimeoutSeconds: 30
#       UnhealthyThresholdCount: 2
#       HealthyThresholdCount: 2
#       Name: mysql
#       Port: 80
#       Protocol: HTTP
#       TargetGroupAttributes:
#         - Key: deregistration_delay.timeout_seconds
#           Value: 60 
#       TargetType: ip
#       VpcId: 
#         Fn::ImportValue: VPC                             ########################################################
  
#   ListenerHTTP2:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       DefaultActions:
#         - TargetGroupArn: !Ref TargetGroup2
#           Type: forward
#       LoadBalancerArn: !Ref LoadBalancer2
#       Port: !Ref LoadBalancerPort
#       Protocol: HTTP


# ## Load Balancer for mysql
#   LoadBalancer2:
#     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#     Properties:
#       LoadBalancerAttributes:
#         - Key: idle_timeout.timeout_seconds
#           Value: 60
#       Name: mysql
#       # "internal" is also an option
#       Scheme: internal
#       SecurityGroups:
#         - !Ref LoadBalancerSecurityGroup2
#       Subnets:
#         - Fn::ImportValue: PrivateSubnet1                                   #public  ###################################################################
#         - Fn::ImportValue: PrivateSubnet2

# # ##Taskfenition for Mysql
#   TaskDefinitionmysql:
#     Type: AWS::ECS::TaskDefinition
    
#     DependsOn: LogGroup2
#     Properties:
#       # Name of the task definition.
#       Family: !Join ['', [!Ref ServiceName, TaskDefinitionmysql]]
     
#       NetworkMode: awsvpc
#       RequiresCompatibilities:
#         - FARGATE
    
#       Cpu: 1024
#       Memory: 2GB
# # A role needed by ECS.
#       ExecutionRoleArn: !Ref ExecutionRole
#       TaskRoleArn: !Ref TaskRole
#       ContainerDefinitions:
#         - Name: mysqll
#           Image: 450852217355.dkr.ecr.us-east-1.amazonaws.com/mysqll:latest
          
#           Environment:
#             - Name: MYSQL_DATABASE
#               Value: bootexample

#             - Name: MYSQL_USER
#               Value: spring

#             - Name: MYSQL_PASSWORD
#               Value: spring@123

#             - Name: MYSQL_ROOT_PASSWORD
#               Value: root@123
#           PortMappings:
#             - ContainerPort: 3306
#           # CloudWatch Logs
#           LogConfiguration:
#             LogDriver: awslogs
#             Options:
#               awslogs-region: !Ref AWS::Region
#               awslogs-group: !Ref LogGroup2
#               awslogs-stream-prefix: ecs
#   service12:
#     Type: AWS::ECS::Service
    
#     DependsOn:
#       - ListenerHTTP2
#     Properties: 
#       ServiceName: mysql
#       Cluster: !Ref Cluster
#       TaskDefinition: !Ref TaskDefinitionmysql
    
#       DeploymentConfiguration:
#         MinimumHealthyPercent: 100
#         MaximumPercent: 200
#       DesiredCount: 2
#       # HealthCheckGracePeriodSeconds: 30
#       LaunchType: FARGATE
#       NetworkConfiguration: 
#         AwsvpcConfiguration:
#           AssignPublicIp: DISABLED
#           Subnets:
#             - Fn::ImportValue: PrivateSubnet1  #private
#             - Fn::ImportValue: PrivateSubnet2
#           SecurityGroups:
#             - !Ref ContainerSecurityGroup2
#       LoadBalancers:
#         - ContainerName: mysqll
#           ContainerPort: 3306
#           TargetGroupArn: !Ref TargetGroup2
#   LogGroup2:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: mysql
